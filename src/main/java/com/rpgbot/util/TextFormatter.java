package com.rpgbot.util;

import com.rpgbot.database.models.Character;
import com.rpgbot.database.models.Item;
import com.rpgbot.entities.Monster;

public class TextFormatter {
    public static String formatCharacterInfo(Character character) {
        StringBuilder sb = new StringBuilder();
        sb.append("üë§ ").append(character.getName()).append("\n");
        sb.append("üèÜ –£—Ä–æ–≤–µ–Ω—å: ").append(character.getLevel()).append("\n");
        sb.append("üí´ –û–ø—ã—Ç: ").append(character.getExperience()).append("/").append(character.getExpToNextLevel()).append("\n");
        sb.append("üí∞ –ó–æ–ª–æ—Ç–æ: ").append(character.getGold()).append("\n\n");

        sb.append("‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: ").append(character.getCurrentHealth()).append("/").append(character.getMaxHealth()).append("\n");

        if (character.getEquippedWeapon() != null) {
            sb.append("‚öîÔ∏è –û—Ä—É–∂–∏–µ: ").append(character.getEquippedWeapon().getName()).append("\n");
        }

        if (character.getEquippedArmor() != null) {
            sb.append("üõ°Ô∏è –ë—Ä–æ–Ω—è: ").append(character.getEquippedArmor().getName()).append("\n");
        }

        return sb.toString();
    }

    public static String formatCharacterStats(Character character) {
        StringBuilder sb = new StringBuilder();
        sb.append("üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ").append(character.getName()).append(":\n\n");

        sb.append("üí™ –°–∏–ª–∞: ").append(character.getStats().getStrength()).append("\n");
        sb.append("üèπ –õ–æ–≤–∫–æ—Å—Ç—å: ").append(character.getStats().getAgility()).append("\n");
        sb.append("üõ°Ô∏è –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: ").append(character.getStats().getEndurance()).append("\n");
        sb.append("üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: ").append(character.getStats().getIntelligence()).append("\n");
        sb.append("üîÆ –ú—É–¥—Ä–æ—Å—Ç—å: ").append(character.getStats().getWisdom()).append("\n\n");

        sb.append("üéØ –ê—Ç–∞–∫–∞: ").append(character.getAttackPower()).append("\n");
        sb.append("‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: ").append(character.getMaxHealth()).append("\n");

        if (character.getStatPoints() > 0) {
            sb.append("\n–î–æ—Å—Ç—É–ø–Ω–æ –æ—á–∫–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: ").append(character.getStatPoints());
        }

        return sb.toString();
    }

    public static String formatBattleStatus(Character character, Monster enemy, boolean isCharacterTurn, boolean battleEnded) {
        StringBuilder sb = new StringBuilder();

        sb.append("‚öîÔ∏è –ë–æ–π —Å ").append(enemy.getName()).append(" ‚öîÔ∏è\n\n");

        // –°—Ç–∞—Ç—É—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        sb.append("üë§ ").append(character.getName()).append("\n");
        sb.append("‚ù§Ô∏è ").append(createHealthBar(character.getCurrentHealth(), character.getMaxHealth())).append("\n");
        sb.append("   ").append(character.getCurrentHealth()).append("/").append(character.getMaxHealth()).append(" HP\n\n");

        // –°—Ç–∞—Ç—É—Å –≤—Ä–∞–≥–∞
        sb.append("üëπ ").append(enemy.getName()).append("\n");
        sb.append("‚ù§Ô∏è ").append(createHealthBar(enemy.getCurrentHealth(), enemy.getMaxHealth())).append("\n");
        sb.append("   ").append(enemy.getCurrentHealth()).append("/").append(enemy.getMaxHealth()).append(" HP\n\n");

        if (battleEnded) {
            if (character.getCurrentHealth() > 0) {
                sb.append("üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!");
            } else {
                sb.append("üíÄ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏...");
            }
        } else if (isCharacterTurn) {
            sb.append("–í–∞—à —Ö–æ–¥. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
        } else {
            sb.append(enemy.getName()).append(" –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∞—Ç–∞–∫–æ–≤–∞—Ç—å...");
        }

        return sb.toString();
    }

    private static String createHealthBar(int current, int max) {
        int filled = (int) Math.round(10 * ((double) current / max));
        filled = Math.max(0, Math.min(10, filled));

        StringBuilder sb = new StringBuilder();
        sb.append("[");
        for (int i = 0; i < 10; i++) {
            sb.append(i < filled ? "‚ñà" : "‚ñë");
        }
        sb.append("]");

        return sb.toString();
    }

    public static String formatItemDetails(Item item) {
        StringBuilder sb = new StringBuilder();

        sb.append("üõí ").append(item.getName()).append("\n");
        sb.append("‚ú® –†–µ–¥–∫–æ—Å—Ç—å: ").append(getRarityName(item.getRarity())).append("\n\n");

        sb.append(item.getDescription()).append("\n\n");

        sb.append("üí∞ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ").append(item.getSellPrice()).append(" –∑–æ–ª–æ—Ç–∞");

        return sb.toString();
    }

    private static String getRarityName(String rarity) {
        switch (rarity) {
            case "common": return "–û–±—ã—á–Ω—ã–π";
            case "rare": return "–†–µ–¥–∫–∏–π";
            case "epic": return "–≠–ø–∏—á–µ—Å–∫–∏–π";
            case "legendary": return "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π";
            default: return rarity;
        }
    }
}