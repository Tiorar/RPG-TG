package com.rpgbot.handlers;

import com.rpgbot.RpgBot;
import com.rpgbot.commands.Command;
import com.rpgbot.database.models.Character;
import com.rpgbot.database.models.User;
import com.rpgbot.database.repositories.CharacterRepository;
import com.rpgbot.database.repositories.UserRepository;
import com.rpgbot.entities.Stats;
import com.rpgbot.util.TextFormatter;

import java.util.ArrayList;
import java.util.List;

public class CharacterHandler implements Command {
    private final RpgBot bot;
    private final long chatId;
    private final UserRepository userRepository;
    private final CharacterRepository characterRepository;
    private String[] args;
    private int messageId;

    public CharacterHandler(RpgBot bot, long chatId,
                            UserRepository userRepository,
                            CharacterRepository characterRepository) {
        this.bot = bot;
        this.chatId = chatId;
        this.userRepository = userRepository;
        this.characterRepository = characterRepository;
    }

    @Override
    public void setArgs(String[] args) {
        this.args = args;
    }

    @Override
    public void setMessageId(int messageId) {
        this.messageId = messageId;
    }

    @Override
    public void execute() {
        if (args == null || args.length == 0) {
            showMainMenu();
        } else {
            switch (args[0]) {
                case "create": handleCharacterCreation(); break;
                case "stats": showCharacterStats(); break;
                case "distribute": distributeStats(); break;
                default: showMainMenu();
            }
        }
    }

    private void showMainMenu() {
        User user = userRepository.findByChatId(chatId).orElseGet(() -> {
            User newUser = new User();
            newUser.setChatId(chatId);
            userRepository.save(newUser);
            return newUser;
        });

        characterRepository.findByUser(user).ifPresentOrElse(
                this::showCharacterInfo,
                this::startCharacterCreation
        );
    }

    private void startCharacterCreation() {
        bot.sendMessage(chatId,
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ –¢—Ä–∞–¥–µ–Ω–∞!\n" +
                        "–ö–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?");
    }

    private void showCharacterInfo(Character character) {
        String message = TextFormatter.formatCharacterInfo(character);
        InlineKeyboardMarkup keyboard = createCharacterMenu();
        bot.sendMessageWithKeyboard(chatId, message, keyboard);
    }

    private InlineKeyboardMarkup createCharacterMenu() {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(InlineKeyboardButton.builder()
                .text("üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
                .callbackData("/character stats")
                .build());
        row1.add(InlineKeyboardButton.builder()
                .text("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å")
                .callbackData("/inventory")
                .build());

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(InlineKeyboardButton.builder()
                .text("üíº –ó–∞–¥–∞–Ω–∏—è")
                .callbackData("/job")
                .build());
        row2.add(InlineKeyboardButton.builder()
                .text("‚öîÔ∏è –î—É—ç–ª–∏")
                .callbackData("/duel")
                .build());

        keyboard.add(row1);
        keyboard.add(row2);

        return bot.createKeyboard(keyboard);
    }

    private void handleCharacterCreation() {
        if (args.length == 1) {
            bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:");
            return;
        }

        User user = userRepository.findByChatId(chatId).orElseThrow();

        if (args.length == 2) {
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
            Character character = new Character();
            character.setName(args[1]);
            character.setUser(user);
            characterRepository.save(character);

            showClassSelection();
        } else if (args.length == 3) {
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞
            Character character = characterRepository.findByUser(user).orElseThrow();
            character.setClassName(args[2]);
            character.setStats(new Stats());
            character.setStatPoints(4);
            characterRepository.save(character);

            distributeStats();
        }
    }

    private void showClassSelection() {
        String message = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:";
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(InlineKeyboardButton.builder()
                .text("üõ°Ô∏è –í–æ–∏–Ω")
                .callbackData("/character create Warrior")
                .build());
        row1.add(InlineKeyboardButton.builder()
                .text("üèπ –õ—É—á–Ω–∏–∫")
                .callbackData("/character create Archer")
                .build());

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(InlineKeyboardButton.builder()
                .text("üîÆ –ú–∞–≥")
                .callbackData("/character create Mage")
                .build());
        row2.add(InlineKeyboardButton.builder()
                .text("‚ò†Ô∏è –ö—É–ª—å—Ç–∏—Å—Ç")
                .callbackData("/character create Cultist")
                .build());
        row2.add(InlineKeyboardButton.builder()
                .text("üåÄ –•–∞–æ—Ç–∏—á–µ—Å–∫–∏–π –º–∞–≥")
                .callbackData("/character create ChaosMage")
                .build());

        keyboard.add(row1);
        keyboard.add(row2);

        bot.sendMessageWithKeyboard(chatId, message, bot.createKeyboard(keyboard));
    }

    private void distributeStats() {
        Character character = characterRepository.findByUser(
                userRepository.findByChatId(chatId).orElseThrow()
        ).orElseThrow();

        if (character.getStatPoints() <= 0) {
            completeCharacterCreation(character);
            return;
        }

        String message = buildStatsDistributionMessage(character);
        InlineKeyboardMarkup keyboard = createStatsKeyboard(character);

        if (messageId == 0) {
            bot.sendMessageWithKeyboard(chatId, message, keyboard);
        } else {
            bot.editMessage(chatId, messageId, message, keyboard);
        }
    }

    private String buildStatsDistributionMessage(Character character) {
        Stats stats = character.getStats();
        return String.format(
                "–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ %d –æ—á–∫–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:\n\n" +
                        "üí™ –°–∏–ª–∞: %d\n" +
                        "üèÉ –õ–æ–≤–∫–æ—Å—Ç—å: %d\n" +
                        "‚ù§Ô∏è –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: %d\n" +
                        "üìö –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: %d\n" +
                        "üîÆ –ú—É–¥—Ä–æ—Å—Ç—å: %d",
                character.getStatPoints(),
                stats.getStrength(),
                stats.getAgility(),
                stats.getEndurance(),
                stats.getIntelligence(),
                stats.getWisdom()
        );
    }

    private InlineKeyboardMarkup createStatsKeyboard(Character character) {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        String[] stats = {"strength", "agility", "endurance", "intelligence", "wisdom"};
        String[] emojis = {"üí™", "üèÉ", "‚ù§Ô∏è", "üìö", "üîÆ"};

        for (int i = 0; i < stats.length; i++) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(InlineKeyboardButton.builder()
                    .text(emojis[i] + " +1")
                    .callbackData("/character distribute " + stats[i])
                    .build());
            keyboard.add(row);
        }

        // –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if (character.getStatPoints() < 4) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(InlineKeyboardButton.builder()
                    .text("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å")
                    .callbackData("/character complete")
                    .build());
            keyboard.add(row);
        }

        return bot.createKeyboard(keyboard);
    }

    private void completeCharacterCreation(Character character) {
        character.calculateDerivedStats();
        characterRepository.save(character);
        bot.sendMessage(chatId,
                "–û—Ç–ª–∏—á–Ω–æ, " + character.getName() + "! –¢–µ–ø–µ—Ä—å –≤—ã –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º!\n" +
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º–∏—Ä–æ–º.");
    }

    private void showCharacterStats() {
        Character character = characterRepository.findByUser(
                userRepository.findByChatId(chatId).orElseThrow()
        ).orElseThrow();

        bot.sendMessage(chatId, TextFormatter.formatCharacterStats(character));
    }
}