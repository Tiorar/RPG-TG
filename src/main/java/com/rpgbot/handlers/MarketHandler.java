package com.rpgbot.handlers;

import com.rpgbot.RpgBot;
import com.rpgbot.commands.Command;
import com.rpgbot.database.models.AuctionLot;
import com.rpgbot.database.models.Character;
import com.rpgbot.database.models.Item;
import com.rpgbot.database.repositories.AuctionRepository;
import com.rpgbot.database.repositories.CharacterRepository;
import com.rpgbot.database.repositories.InventoryRepository;
import com.rpgbot.database.repositories.UserRepository;
import com.rpgbot.util.TextFormatter;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class MarketHandler implements Command {
    private final RpgBot bot;
    private final long chatId;
    private final UserRepository userRepository;
    private final CharacterRepository characterRepository;
    private final InventoryRepository inventoryRepository;
    private final AuctionRepository auctionRepository;
    private String[] args;
    private int messageId;

    public MarketHandler(RpgBot bot, long chatId,
                         UserRepository userRepository,
                         CharacterRepository characterRepository,
                         InventoryRepository inventoryRepository,
                         AuctionRepository auctionRepository) {
        this.bot = bot;
        this.chatId = chatId;
        this.userRepository = userRepository;
        this.characterRepository = characterRepository;
        this.inventoryRepository = inventoryRepository;
        this.auctionRepository = auctionRepository;
    }

    @Override
    public void setArgs(String[] args) {
        this.args = args;
    }

    @Override
    public void setMessageId(int messageId) {
        this.messageId = messageId;
    }

    @Override
    public void execute() {
        if (args == null || args.length == 0) {
            showMarketMainMenu();
            return;
        }

        switch (args[0]) {
            case "list": showAuctionList(); break;
            case "view": viewAuctionLot(); break;
            case "buy": buyItem(); break;
            case "sell": showSellMenu(); break;
            case "confirm_sell": confirmSellItem(); break;
            case "my_lots": showMyLots(); break;
            case "cancel": cancelAuctionLot(); break;
            default: showMarketMainMenu();
        }
    }

    private void showMarketMainMenu() {
        String message = "üèõÔ∏è –ê—É–∫—Ü–∏–æ–Ω –≥–∏–ª—å–¥–∏–∏\n\n" +
                "–ö–æ–º–∏—Å—Å–∏—è: 1 –∑–æ–ª–æ—Ç–∞—è –º–æ–Ω–µ—Ç–∞ –∑–∞ –ª–æ—Ç";

        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(InlineKeyboardButton.builder()
                .text("üìú –°–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤")
                .callbackData("/market list")
                .build());
        row1.add(InlineKeyboardButton.builder()
                .text("üí∞ –ú–æ–∏ –ª–æ—Ç—ã")
                .callbackData("/market my_lots")
                .build());

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(InlineKeyboardButton.builder()
                .text("üíé –ü—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
                .callbackData("/market sell")
                .build());

        keyboard.add(row1);
        keyboard.add(row2);

        bot.sendMessageWithKeyboard(chatId, message, bot.createKeyboard(keyboard));
    }

    private void showAuctionList() {
        List<AuctionLot> lots = auctionRepository.findActive();

        if (lots.isEmpty()) {
            bot.sendMessage(chatId, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤");
            return;
        }

        String message = "–ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã:";
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        for (AuctionLot lot : lots) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(InlineKeyboardButton.builder()
                    .text(lot.getItem().getName() + " - " + lot.getPrice() + " –∑–æ–ª–æ—Ç–∞")
                    .callbackData("/market view " + lot.getId())
                    .build());
            keyboard.add(row);
        }

        List<InlineKeyboardButton> backRow = new ArrayList<>();
        backRow.add(InlineKeyboardButton.builder()
                .text("üîô –ù–∞–∑–∞–¥")
                .callbackData("/market")
                .build());
        keyboard.add(backRow);

        bot.sendMessageWithKeyboard(chatId, message, bot.createKeyboard(keyboard));
    }

    private void viewAuctionLot() {
        if (args.length < 2) return;

        long lotId = Long.parseLong(args[1]);
        Optional<AuctionLot> lotOpt = auctionRepository.findById(lotId);

        if (lotOpt.isEmpty()) {
            bot.sendMessage(chatId, "–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        AuctionLot lot = lotOpt.get();
        Character character = getCurrentCharacter();

        String message = buildLotInfoMessage(lot);
        InlineKeyboardMarkup keyboard = createLotActionsKeyboard(lot, character);

        bot.sendMessageWithKeyboard(chatId, message, keyboard);
    }

    private String buildLotInfoMessage(AuctionLot lot) {
        return String.format(
                "üè∑Ô∏è –õ–æ—Ç #%d\n" +
                        "üì¶ %s\n" +
                        "üí∞ %d –∑–æ–ª–æ—Ç–∞\n" +
                        "‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: %d –¥–Ω–µ–π\n" +
                        "üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: %s\n\n" +
                        "%s",
                lot.getId(),
                lot.getItem().getName(),
                lot.getPrice(),
                LocalDateTime.now().until(lot.getExpiresAt()).toDays(),
                lot.getSeller().getName(),
                lot.getItem().getDescription()
        );
    }

    private InlineKeyboardMarkup createLotActionsKeyboard(AuctionLot lot, Character character) {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        if (!lot.getSeller().equals(character)) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(InlineKeyboardButton.builder()
                    .text("üõí –ö—É–ø–∏—Ç—å")
                    .callbackData("/market buy " + lot.getId())
                    .build());
            keyboard.add(row);
        } else {
            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(InlineKeyboardButton.builder()
                    .text("‚ùå –û—Ç–æ–∑–≤–∞—Ç—å")
                    .callbackData("/market cancel " + lot.getId())
                    .build());
            keyboard.add(row);
        }

        List<InlineKeyboardButton> backRow = new ArrayList<>();
        backRow.add(InlineKeyboardButton.builder()
                .text("üîô –ù–∞–∑–∞–¥")
                .callbackData("/market list")
                .build());
        keyboard.add(backRow);

        return bot.createKeyboard(keyboard);
    }

    private void buyItem() {
        if (args.length < 2) return;

        long lotId = Long.parseLong(args[1]);
        Optional<AuctionLot> lotOpt = auctionRepository.findById(lotId);
        Character buyer = getCurrentCharacter();

        if (lotOpt.isEmpty()) {
            bot.sendMessage(chatId, "–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        AuctionLot lot = lotOpt.get();

        if (buyer.getGold() < lot.getPrice()) {
            bot.sendMessage(chatId, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞");
            return;
        }

        // –ü–µ—Ä–µ–¥–∞—á–∞ –∑–æ–ª–æ—Ç–∞
        buyer.setGold(buyer.getGold() - lot.getPrice());
        lot.getSeller().setGold(lot.getSeller().getGold() + lot.getPrice());

        // –ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
        inventoryRepository.addItem(buyer, lot.getItem());

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        lot.setSold(true);
        auctionRepository.save(lot);

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        bot.sendMessage(chatId,
                "–í—ã –∫—É–ø–∏–ª–∏ " + lot.getItem().getName() + " –∑–∞ " + lot.getPrice() + " –∑–æ–ª–æ—Ç–∞");

        notifySeller(lot);
    }

    private void notifySeller(AuctionLot lot) {
        String message = String.format(
                "–í–∞—à –ª–æ—Ç %s –ø—Ä–æ–¥–∞–Ω –∑–∞ %d –∑–æ–ª–æ—Ç–∞",
                lot.getItem().getName(),
                lot.getPrice()
        );

        bot.sendMessage(
                userRepository.findByCharacter(lot.getSeller()).get().getChatId(),
                message
        );
    }

    private void showSellMenu() {
        Character character = getCurrentCharacter();
        List<Item> items = inventoryRepository.findSellable(character);

        if (items.isEmpty()) {
            bot.sendMessage(chatId, "–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏");
            return;
        }

        String message = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:";
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        for (Item item : items) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(InlineKeyboardButton.builder()
                    .text(item.getName())
                    .callbackData("/market select_item " + item.getId())
                    .build());
            keyboard.add(row);
        }

        List<InlineKeyboardButton> backRow = new ArrayList<>();
        backRow.add(InlineKeyboardButton.builder()
                .text("üîô –ù–∞–∑–∞–¥")
                .callbackData("/market")
                .build());
        keyboard.add(backRow);

        bot.sendMessageWithKeyboard(chatId, message, bot.createKeyboard(keyboard));
    }

    private void confirmSellItem() {
        if (args.length < 3) return;

        long itemId = Long.parseLong(args[1]);
        int price = Integer.parseInt(args[2]);
        Character seller = getCurrentCharacter();

        if (seller.getGold() < 1) {
            bot.sendMessage(chatId, "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–æ–ª–æ—Ç–∞ –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏ (1 –∑–æ–ª–æ—Ç–∞—è)");
            return;
        }

        Optional<Item> itemOpt = inventoryRepository.findById(itemId);
        if (itemOpt.isEmpty()) {
            bot.sendMessage(chatId, "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }

        Item item = itemOpt.get();

        // –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ—Ç–∞
        AuctionLot lot = new AuctionLot();
        lot.setItem(item);
        lot.setSeller(seller);
        lot.setPrice(price);
        lot.setCreatedAt(LocalDateTime.now());
        lot.setExpiresAt(LocalDateTime.now().plusDays(14));

        // –û–ø–ª–∞—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏
        seller.setGold(seller.getGold() - 1);

        // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
        inventoryRepository.remove(seller, item);

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        auctionRepository.save(lot);
        characterRepository.save(seller);

        bot.sendMessage(chatId,
                "–ü—Ä–µ–¥–º–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω –∑–∞ " + price + " –∑–æ–ª–æ—Ç–∞\n" +
                        "–ö–æ–º–∏—Å—Å–∏—è: 1 –∑–æ–ª–æ—Ç–∞—è");
    }

    private void showMyLots() {
        Character character = getCurrentCharacter();
        List<AuctionLot> lots = auctionRepository.findBySeller(character);

        if (lots.isEmpty()) {
            bot.sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤");
            return;
        }

        String message = "–í–∞—à–∏ –ª–æ—Ç—ã:";
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        for (AuctionLot lot : lots) {
            String status = lot.isSold() ? "‚úÖ –ü—Ä–æ–¥–∞–Ω–æ" :
                    "‚è≥ –ê–∫—Ç–∏–≤–Ω–æ (" + lot.getExpiresAt().until(LocalDateTime.now()).toDays() + "–¥)";

            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(InlineKeyboardButton.builder()
                    .text(lot.getItem().getName() + " - " + lot.getPrice() + " –∑–æ–ª–æ—Ç–∞ (" + status + ")")
                    .callbackData("/market view " + lot.getId())
                    .build());
            keyboard.add(row);
        }

        List<InlineKeyboardButton> backRow = new ArrayList<>();
        backRow.add(InlineKeyboardButton.builder()
                .text("üîô –ù–∞–∑–∞–¥")
                .callbackData("/market")
                .build());
        keyboard.add(backRow);

        bot.sendMessageWithKeyboard(chatId, message, bot.createKeyboard(keyboard));
    }

    private void cancelAuctionLot() {
        if (args.length < 2) return;

        long lotId = Long.parseLong(args[1]);
        Optional<AuctionLot> lotOpt = auctionRepository.findById(lotId);
        Character character = getCurrentCharacter();

        if (lotOpt.isEmpty() || !lotOpt.get().getSeller().equals(character)) {
            bot.sendMessage(chatId, "–ù–µ–ª—å–∑—è –æ—Ç–æ–∑–≤–∞—Ç—å —ç—Ç–æ—Ç –ª–æ—Ç");
            return;
        }

        AuctionLot lot = lotOpt.get();
        inventoryRepository.addItem(character, lot.getItem());
        auctionRepository.delete(lot);

        bot.sendMessage(chatId, "–õ–æ—Ç –æ—Ç–æ–∑–≤–∞–Ω, –ø—Ä–µ–¥–º–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å");
    }

    private Character getCurrentCharacter() {
        return characterRepository.findByUser(
                userRepository.findByChatId(chatId).orElseThrow()
        ).orElseThrow();
    }
}